/** Flexbox property. */
/*? Flexbox works in 1 dimension only. In flexbox their are two axis one is main axis which is by default work horizontally. & cross axis works vertically. */
/*? For flexbox we need a container inside which children are presented. So firstly we declare the container to flex, For that we use display:flex; property which tells that this container is converted into flexbox. & children are automatically treated as flex-child. */
/*? In flex box we have some properties. */
/*? 1. flex-direction: ; This will tell in which direction our flex property will apply. By default it sets to row. If we change to row-reverse than child-element will arrange row wise but in reverse direction. */
/*? flex-direction: ; if we set to column than our main axis is works vertically& cross axis is works horizontally. And the element will arrange vertically. & if we gave column-reverse to it than all things will be same but child-element will arrange column wise but in reverse order. */
/*? 2. flex-wrap: ; It is set nowrap by default, this means when our screen shrinks & our element will overflow on screen so they will go to next line. If we set to wrap-reverse than element will go to next line but in reverse order. */

/*? 3. justify-content: ; This will works around main axis. */
/*todo justify-content:center; This will center all the child-element around main axis. */
/*todo justify-content:start/flex-start; This will place all the child-element top-left of screen side around main axis. */
/*todo justify-content:end/ flex-end; This will place all the child-element top-right of screen side around main axis. */
/*todo justify-content:space-between; This will place first child-element in top-left side of screen & last child-element in top-right of screen side around main axis. & remaining child-element will place between them with even space from left & right. */
/*todo justify-content:space-evenly; This will give even space to all around the child-element. */
/*todo justify-content:space-around; This will give even space to all child-element from left & right. That's why we saw tah in middle element space are twice than extreme left or extreme right child-element. */

/*? align-item: ; This will works around cross axis. */
/*todo justify-content:center; This will center all the child-element around main axis. */
/*todo justify-content:start/flex-start; This will place all the child-element top-left of screen side around cross axis. */
/*todo justify-content:end/ flex-end; This will place all the child-element top-right of screen side around cross axis. */
/*todo justify-content:space-between; This will place first child-element in top-left side of screen & last child-element in top-right of screen side around cross axis. & remaining child-element will place between them with even space from left & right. */
/*todo justify-content:space-evenly; This will give even space to all around the child-element. */
/*todo justify-content:space-around; This will give even space to all child-element from left & right. That's why we saw tah in middle element space are twice than extreme left or extreme right child-element. */

/*? align-content: ; This will only apply if we set flex-wrap:wrap/wrap-reverse; & this will apply when screen size change than to adjust vertical space. We use start,end,center,space-around,space-between,space-evenly,baseline etc. */

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  padding: 5px;
  width: 100vw;
  height: 100vh;
}

.container {
  width: 100%;
  height: 100%;
  background-color: chartreuse;
  padding: 5px;

  /** FlexBox */
  display: flex;
  flex-direction: row;
  /* justify-content: space-evenly; */
  /* align-items: baseline; */
  flex-wrap: wrap;

  /* align-content: space-around; */
}

.box {
  width: 100px;
  height: 100px;
  background-color: coral;
  margin: 0 5px 5px 0;
  border: 1px solid #2c2c2c;
}

span {
  margin-right: 5px;
}

.Big-font {
  font-size: 2rem;
}
